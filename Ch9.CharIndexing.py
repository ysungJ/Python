#9장 문자열 
"""
인덱싱과 슬라이싱 사용시 원하는대로 가공 가능
인덱싱 -> 무엇가를 가리킨다는 의미 
문자열의 글자에 번호를 지정하고 가르키는 것 -> 문자열 인덱싱 
특수문자도 포함됨
"""
hi = "9장 문자열 인덱싱 파악해보기!"
#양수 01 2 345 6 789 10 111213141516
#음수 -17-16 -15 -14-13-12 -11 -10-9-8 -7 -6-5-4-3-2-1
print(hi[0])
print(hi[16])
#0~16까지 존재

#대괄호로 원하는 위치 지정 가능

#양수가 아닌 음수로 뒤에서 부터 번호 입력 가능 
print(hi[-1])
print(hi[-17])
#-1부터 -17까지 존재

#슬라이싱
"""
슬라이싱 자른다라는 의미 
문자열 슬라이싱은 원하는 위치부터 원하는 위치까지 문자열을 자르는 방법 
문자열의 인덱스 번호를 알고 있어야한다.

변수명[시작번호:끝번호 + 1]
"""
print(hi[3:6])
print(hi[4:10])

#음수도 가능

print(hi[3:-6])
print(hi[4:-10])

#슬라이싱은 시작번호, 끝번호 안적어도 됨 
#시작번호 안적으면 첫글자부터, 끝번호를 안적으면 마지막까지 출력
print(hi[:8])
print(hi[4:])

#변순명[시작번호:끝번호+1:간격] 
#간격만큼 인덱스 뛰면서 출력
print(hi[3:14:2])

#문자열 포매팅
"""
파이썬에서는 문자열 포맷코드, format함수,f문자열 3가지로 문자열 포매팅을 출력
%d -> 정수
%f -> 실수
%s ->문자열 ... 등 , c와 비슷
"""
n = 3
print("n은 %d입니다"%n)

#2게이상도 가능
m = 5
print("n은 %d, m은 %d입니다"%(n,m))

#포매팅 할 때는 자료형에 맞는걸 사용해야한다.

#format함수
#format함수는 내장 함수 중 하나, 자료형을 신경쓰지않고 포매팅 가능 

f = "three"
print("n은 {0}, 영어로 {1}이다.".format(n,m))

"""
format함수
1.인덱스를 사용하는 경우 
중괄호 안에 인덱스를 넣어주면 순서대로 포매팅
중복되는 값을 넣고 싶을 떄 같은 인덱스 여러번 사용 가능

2. 인덱스를 사용하지 않는 경우
인덱스를 사용하지 않으면 format()안에 적은 값 순서대로 포매팅

3. 변수를 사용하는 경우
중괄호 안에 원하는 변수 이름을 넣을 수 있음 
ex) print("{name}".format(name = "철수"))

"""
#f 문자열 사용
#Python 3.6이상만 사용 가능

print(f"n은{n}이고, {f}이다")

#문자열 응용 함수
"""
1. 문자열 길이 구하는 함수 : len()
len(문자열)  해당 문자열의 길이를 반환

2. 특정 문자의 개수 세기 : count()
문자열.count(문자) 문자열 안에 포함된 해당 문자의 개수 반환 

3. 특정 문자 위치 찾기 : find()
문자열.find(문자) 문자열에서 해당 문자의 위치, 인덱스를 반환
문자열에 해당 문자가 여러 개 있으면 첫번째 인덱스를 반환하고 없으면 -1을 반환

4. 특정 문자열을 다른 문자열로 반환 : replace()
문자열.replace(기존문자열,대체문자열)
전체 문자열 안에 있는 어떤 문자열을 찾아 대체 문자열로 반환 

5. 특정 문자를 기준으로 자르는 함수 : split()
문자열.split(문자) 해당 문자를 기준으로 문자열을 자름
문자를 적지 않은 경우, 자동으로 띄어쓰기,탭, 엔터 등의 공백으로 자름 
반환한 값은 문자열 자료형이 아닌 리스트형 자료형임 

이외에도 join()-> 문자열 사이에 문자열을 삽입
upper() -> 소문자를 대문자로 바꾸기, lower() 대문자를 소문자로 바꾸기
strip() 양쪽 공백 지우기등 다양한 문자열 함수가 존재
"""
print(len(hi)) #문자열 길이 반환

a = "apple"
print(a.count('p')) #특정 문자를 카운트

#특정 문자 찾는 find
print(a.find('l'))
print(a.find('h'))

#특정 문자열을 다른 문자열로 반환
b = "python is very fun language"
print(b.replace("python","CPP"))

#특정 문자열 기준으로 자르기
c = "python is fun"
print(c.split())
d = "py,thon,is,fun,so"
print(d.split(','))

e = "도레미 레미미 솔미미파"
print(e.index('미'))
